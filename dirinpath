#!/usr/bin/env bash

# function to copy at top and use ech0 (rather than ech1
function ech0 () {     # turn on debugging with  export ech0=ON
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}

function mem_check () {
    chk_mem=$1
    found="no"
    IFS=":"            # set Interal Field Seperator for PATH var
    ech0 $PATH

    read -r -a p_file <<< "$PATH"   # parse into p_file array  sep is colon
#   ech0 ${#p_file[*]}           # num of elt in array   
    let ub=${#p_file[@]}         # another num of elt in array 
#   ech0 $ub

    let j=0
    while [ $j -lt $ub ]; do    # loop to show variable
      
      if [ ".${p_file[$j]}" == ".." ]; then   # replace . by pwd 
        p_file[$j]=$PWD
      fi

      if [ -f ${p_file[$j]}/$chk_mem ]; then  # show if found in dir.
        if [ ".${p_file[$j]}" == ".$dir_to_check" ]; then
          echo $j  $chk_mem  is in ${p_file[$j]} 
        else
          echo $j  $chk_mem  is in ${p_file[$j]}" <<==path-NOT-seach" 
        fi
        found="yes"
      fi
      let j=$j+1
    done

    if [ ".$found" == ".no" ]; then
      echo "$chk_mem is NOT in your PATH"
    fi
    
  IFS=" "   # I M P O R A N T -- reset for blanks as parse sep.
} 

if [ ".$1" == "." ]; then

cat << "EOF"
usage: determine which files in a directory are also in PATH file.
syntax: dirinpath parm1

parm1: NULL - shows this help
       othe - uses other to be the specified path

EOF

exit 0
fi

dir_to_check=$1      # <<========= file to process

if [ -d $dir_to_check ]; then
  echo
  echo "List of files in $dir_to_check "
  ls -A $dir_to_check                      # show it
  ls -A $dir_to_check > /tmp/lslist        # save it
else
  echo "$dir_to_check  NOT found. "
  echo "I quit. "
  exit 4
fi

function emptyfile () {
  if [ -f $1 ]; then
    rm $1
    touch $1
  else
    touch $1
  fi

}

# create an array of files to skip  (using temp file /tmp/skiplist)
# 1. make empty, 2. write to temp file, 3. write back to array

emptyfile /tmp/skiplist             #  1. make empty


cat > /tmp/skiplist << "EOF"         # 2. write to temp file
f_acrolist      # list may change over time
c               # inline directories may change
tempname
TEMPNAME
EOF

let i=0                        # 3. write back to array
while read -r who rest ; do
    skip[$i]=$who
    let i=$i+1
done < /tmp/skiplist   # list of mems to skip
let num_skip=$i        # actually one more so chk less

# list the skip list
echo
echo "Skip list below:"
let i=0
while [ $i -lt $num_skip ]; do
  echo $i ${skip[$i]}
  let i=$i+1
done

echo
echo "PATH by number"
showpath

echo
echo "Process list for $dir_to_check"
echo "============================================="
while  read filename rest ; do
  ech0 $filename

  let j=0
  process="yes"
  while [ $j -lt $num_skip ] && [ ".$process" == ".yes" ]; do
    if [ ".${skip[$j]}" == ".$filename" ]; then
      ech0 "MATCH $j ${slip[$j]} $filename "
      process="no"
    else
      ech0 "NO-MATCH $j ${slip[$j]} $filename "
    fi
    let j=$j+1
  done

  echo
  echo "$filename process: $process"
  if [ ".$process" == ".yes" ]; then
    mem_check $filename
  fi
  
done < /tmp/lslist
exit 0
