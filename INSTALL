#!/usr/bin/env bash

# function to copy at top and use ech0 (rather than ech1
function ech0 () {     # turn on debugging with  export ech0=ON
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}

function cpit () {
  passed_val=$@
  ech0 "\$passed_val === $passed_val"
  IFSsave=$IFS
  IFS=" "
  read first_word rest <<< $passed_val
  IFS=$IFSsave
# echo "$first_word   ${first_word:0:1}"
  if [ ".${first_word:0:1}" == ".#" ]; then
    echo "comment:$passed_val" >> $rchbls/BooHoo
    BooHoo="yes"              # mark that cp was failure
    return
  fi
  
   # do the copy
   echo "$passed_val" >> $rchbls/BooHoo
   if [ ! -e $first_word ]; then
     echo "BooHoo: $first_word does NOT exist. <<===" >> $rchbls/BooHoo
     return
   fi

   echo "cp -v $first_word $rchbls/$first_word" >> $rchbls/BooHoo
   cp -v $first_word $rchbls/$first_word
   ccrc=$?
#  echo "$ccrc" >> $rchbls/BooHoo

  if [ $ccrc -eq 0 ]; then
    echo "$1 copied (rc=$ccrc) to "$exec_lib >>$exec_lib/BooHoo
  else
    echo "BooHoo -- cp ret code ($ccrc) check $1 <<++++" >> $exec_lib/BooHoo
    BooHoo="yes"
  fi

  return
}

##  end of internal functions

## start of executable code

echo "Checking ..."
ech0 "\$rchbls is $rchbls"

if [ ".$rchbls" == "." ]; then
  echo "\$rchbls is NOT set, please fix. "
  echo "Use 'export rchbls=xxx' where xxx is desired exec-lib dir."
  echo "Leaving -- no work done."
  return
fi

if [ ! -e $PWD/builddir ]; then       # weak test to see if right dir.
  echo "It appears you may not have  cd-ed to build-lib "
  echo "Please fix. "
  echo "Leaving -- no work done."
  return
fi

read build_dir rest < $PWD/builddir
echo "build_dir = $build_dir"
read exec_dir rest < $PWD/execdir

if [ ".$build_dir" != ".$PWD" ]; then
  echo
  echo "build-lib indicator ($build_dir) is NOT this dir. ($PWD)"
  echo "Correct this in  $PWD/builddir. "
  echo "Leaving -- no work done."
  return
fi

#echo "Execution lib dir is : "$rchbls/$exec_dir
echo "\$rchbls is $rchbls"
build_lib=$build_dir
exec_lib=$exec_dir 
echo "Build     lib dir is : "$build_dir

# now check to insure exec-lib will be correct.
if [ ".$exec_dir" == ".$rchbls" ]; then
  # $rchbls matchs first word of first line of build-lib/execdir
  ech0 " parm var ($exec_dir) EQUALs  global var \$rchbls ($rchbls)"
  echo "Execution lib dir is : "$exec_lib"  (Yet to be built.)"
else
cat << EOF-exec-lib
      
Execution lib dir is : "$exec_lib"  (Yet to be built.)

  MIS-MATCH   MIS-MATCH      global var and parm value

  Correct by setting \$rchbls (now $rchbls) to be the same 
as the first word on the first line of $build_lib/execdir
which is now ($exec_dir).

Use 'export rchbls=(appropriate)     and/or"
edit $build_lib/execdir.

Leaving - no work done.

EOF-exec-lib
  return
fi

echo
echo -n "Is that correct?  y/Y to continue :"
read answer rest

if [ ".$answer" = ".y" ] || [ ".$answer" == ".Y" ]; then
  echo "answer ($answer), On we go!"
else
  echo "answer ($answer) NOT 'y' or 'Y', Leaving -- nothing done."
  return
fi

# 2 debuggin shorr-out
#echo "EARLY OUT"
#return


if [ -d $exec_lib ]; then
  echo "$exec_lib exists. Please renameit."
  echo -n "Enter new subdirectory name (return to exit): "
  read newname rest
  if [ ".$newname" == "." ]; then
    echo "Nothing done, I quit."
    return
  else
    echo "mv $exec_lib $HOME/$newname"  
    mv $exec_lib $HOME/$newname
    echo "OK, we are ready -- rerun the INSTALL script"
    return
  fi
else
  echo "On we go, allocate, populate and rePATH  $exec_lib."
fi 


ls -alh $exec_lib    
echo "cmd mkdir $exec_lib"
mkdir $exec_lib
ls -alh $exec_lib    
cd $build_lib                  # get to right dir to do work

echo "Your original PATH"
echo $PATH
echo
echo "Start the copy/gen of $exec_lib"

#echo "another early out"
#return

BooHoo="no"
echo "# Message of possible INSTALL copy errors." > $exec_lib/BooHoo
echo "  Search for 'BooHoo' to find concerns." >> $exec_lib/BooHoo
date >> $exec_lib/BooHoo

while read parm_line ; do
# echo "$parm_line"  >> $exec_lib/BooHoo
# echo "cpit $parm_line "
  cpit "$parm_line"
done < INSTALLmbrs

echo
echo "done with the copy/gen of $exec_lib"
echo
ls -A $exec_lib

if [ ".$BooHoo" == ".no" ]; then
  echo
  echo "exec-lib ($exec_lib) is built with NO copy errors."
  echo "Messages are in $exec_lib/BooHoo."
else
  echo
  echo "**************************************************"
  echo "**************************************************"
  echo "exec-lib ($exec_lib) generation HAD copy errors. <<=====:"
  echo "Review messages in $exec_lib/BooHoo."
  echo "**************************************************"
  echo "**************************************************"
fi

cat << EOF-exit

  You are now ready to activate the 'whereisit' environment.
   a.  cd  your-execlib path             (  cd $rchbls )
   b.  '. ./engage'                       that's it.

   You may back off the environment with '. delpath $exec_lib '

   To later re-invoke the environment,  a. and b. above.

Welcome, Good Luck and Thanks
Robert C. Hansen
EOF-exit
return

