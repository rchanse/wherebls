#!/usr/bin/env bash

this_mem=$1

# function to copy at top and use ech0 (rather than ech1
function ech0 () {     # turn on debugging with  export ech0=ON
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}

if [ ".$1" == "." ]; then

cat << "EOF"
usage: for a given member determine which PATH file(s) have it.  
syntax: meminpath parm1

parm1: NULL - shows this help
       other - uses other to be the specified member

EOF

exit 0
fi

    echo
    echo "Your PATH ( \$PATH ) is "
    echo $PATH
    echo

    IFS=":"            # set Interal Field Seperator for PATH var
    #ech0 $PATH

    found="no"
    read -r -a who <<< "$PATH"   # parse into who array  sep is colon
#   ech0 ${#who[*]}           # num of elt in array   
    let ub=${#who[@]}         # another num of elt in array 
#   ech0 $ub

    let j=0
    while [ $j -lt $ub ]; do    # loop to show variable
      
      if [ ".${who[$j]}" == ".." ]; then   # replace . by pwd 
        who[$j]=$PWD
      fi

      if [ -f ${who[$j]}/$this_mem ]; then     # show if found in dir.
        echo $j  $this_mem  is in ${who[$j]} 
        found="yes"
      fi
      let j=$j+1
    done
    
    if [ ".$found" == ".no" ]; then
      echo "$this_mem is NOT found in your PATH."
    fi

  IFS=" "   # I M P O R A N T -- reset for blanks as parse sep.

  quit="no" 
  echo -n "Compare two (enter 2 numbers CR to quit): "
  read a b tail      
  if [ ".$a" == "." ]; then
    quit="yes"
  fi
  
  while [ ".$quit" != ".yes" ]; do  
    let i=$a
    let j=$b
    echo diff ${who[$i]}/$this_mem  ${who[$j]}/$this_mem
    diff ${who[$i]}/$this_mem  ${who[$j]}/$this_mem
    diffrc=$?
    if [ $diffrc -eq 0 ]; then
      echo ${who[$i]}/$this_mem  ${who[$j]}/$this_mem   EQUAL
    else
      echo ${who[$i]}/$this_mem  ${who[$j]}/$this_mem   DIFFERENT
    fi
    
    echo -n "Compare two (enter 2 numbers CR to quit): "
    read a b tail
    if [ ".$a" == "." ]; then
      quit="yes"
    fi
  done


