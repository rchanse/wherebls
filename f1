#!/bin/bash

# debugging I left in the debugging echos but left off 
# uncomment it to turn them on  BEFORE issuing ff  issue
#   export ech0=ON  

# function to copy at top and use ech0 (rather than ech1
function ech0 () {     # turn on debugging with  export ech0=ON
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}
function nop() {    # a NO-OP to make code more readable later
#  VERY helpful making easier to aid in  if-then-else-fi blocks
#  if condition ; then         remember   if cond ; then
#     nop                                    code
#  else                                   else
#     nop                                 fi      will gen synax error
#  fi
#
  return 0
}

ech0 debugging is turned on
# the list of acronyms is 
#  ff_acrolist  if  ~/bin/ff_acroname is empty
#  ~/bin/ff_acroname_dir/member  if  ~/bin/ff_acroname contains member

# code inserted to make work under 'whereis
read exec_dir rest < ~/$rchjlp/execdir
ech0 "\$exec_dir = $exec_dir"
 
## nl=`wc $HOME/bin/ff_acroname | awk '{print $1}'`
nl=`wc $HOME/$exec_dir/ff_acroname | awk '{print $1}'`
ech0 $nl
if [ ".$nl" == ".0" ]; then
##  acro_file=$HOME/bin/ff_acrolist
  acro_file=$HOME/$exec_dir/ff_acrolist
else
##  acroname=`head -n1 $HOME/bin/ff_acroname | tail -n1`
  acroname=`head -n1 $HOME/$exec_dir/ff_acroname | tail -n1`
##  acro_file=$HOME/bin/ff_acrolist_dir/$acroname
  acro_file=$HOME/$exec_dir/ff_acrolist_dir/$acroname
fi

p1=$1                         # first parm
if [ ".$2" == "." ]; then     # see if there is more than one parm
	p2=""                     # nope
else
    orig2=$2          # prep for check of  f acro sudo
    orig3=$3          #   when third parm is null
	shift
	p2=$@                     # obtain rest of cmdline
fi

#  Help info
if [ ".$p1" == "." ] ; then
    echo "parmfile  :>"$acro_file 
	echo ":::::::::::::::::::::::::::::::::::::::::::::::::::"
	echo "::  f -  quick invocation to file                ::"
	echo "::  f parm1 p2 p3 p4                             ::"
	echo "::    parm1                                      ::"
	echo "::      null   - display this help info          ::"
    echo "::      .      - go edit the acro list file      ::"
	echo "::      other  - acro for filename in acro_file  ::"
	echo "::    p2 p3 p4 - action to take default vim      ::"
	echo "::               e.g. f x sudo vim > sudo vim x  ::"
	echo "::                                               ::"
	echo ":: format of acro file    3 values               ::"
	echo "::   field1 acro  the acronym to search for      ::"
	echo "::   field2 filename to act upon                 ::"
	echo "::   field3 action to take  null  vim            ::"
	echo "::    -more info in the acro file itself.-       ::"
	echo ":::::::::::::::::::::::::::::::::::::::::::::::::::"
	exit 
fi

# path to the acro file
if [ ".$p1" == ".." ] ; then    # use  f .  to get to the acro file
	vim $acro_file 
	exit
fi

found="no"   

# logic is processing a file looking for acronym to associate with a
# file and then take action.

#  while  line in file ; do
#     the processing (see comments below
#  done < acro-file

# while  read -r acro filename action rest ; do
while  read -r acro filename a1 a2 a3 rest ; do
  ech0 acro $acro filename $filename a1 $a1 a2 $a2 a3 $a3 rest $rest

#  if null-line skip it  (debug msg as null/blank line.)
#     if char1 of acro is #  skip it  (debug msg as comment
#        if passed-val is acro  mark found to bail 
#           if command_line(3) is null  process acrofile override
#                else if command_line(2)=sudo and (3)=null  sudo vim file
#                           else command_line(2+) is override_cmd

if [ "." != ".$acro" ]; then             # null acro => blank line
  if [ ${acro:0:1}  != "#" ]; then       # char(1) of acro => comment
    nop
    if [ "$p1" == "$acro" ] ; then       # matching acro ??
      found='yes'
      ech0 "found is now yes for " $acro  $filename

      line_action=""                 # default acrolib override => null
      command_override=""            # default cmdline overrid => null
      if [ ".$p2" == "." ]; then     # p2 null => no cmd line to process
        nop
        ech0 no cmdline
        line_action=""
        if [ "." != ".$a1" ]; then line_action=$a1;fi
        if [ "." != ".$a2" ]; then line_action=$line_action" "$a2;fi
        if [ "." != ".$a3" ]; then line_action=$line_action" "$a3;fi
        if [ "." != ".$rest" ]; then line_action=$line_action" "$rest;fi
        ech0 Built override by acro_lib"."$line_action"."
      else
        nop
        echo "  "$orig2"  "$orig3""
        echo check for single sudo
        if [ ".$orig2" == ".sudo" ] && [ ".$orig3" == "." ]; then 
          command_override="sudo vim "
        else
          command_override=$p2
        fi
      fi

      ech0 pre break  ">"$line_action"<>"$command_override"<"
      break        # exit loop if found

    else
      nop
      ech0 "Onto the next line "
    fi
  else
    ech0 comment line
  fi
else
  ech0 blank line
fi
done < $acro_file        # end read loop from given acro file 

# NOT found msg and exit
if [ "$found" == "no" ] ; then
	echo "::                                               "
	echo ::  acronym  $p1  NOT found try . for acrolist 
	echo "::                                               "
	exit 4
fi

# The actual file to work on 

# Handle ~/whoever   to become     /home/$USER/whoever
if [ ${filename:0:1} == "~" ] ; then
	lead=$HOME              # now is /home/$USER   or   /root
	tailend=${filename:1}   # peel off the ~
	filename=$lead$tailend  # provide actual name 
fi

echo "acro line override:"$line_action
echo "cmdline override:" $p2
echo "acro:"$p1", filename:"$filename

# Set the cmd_action value        
cmd_action="vim "                      #  set the default
ech0 "1 $cmd_action  >"$line_action"<"
if [ ".$line_action" != "." ]; then
  cmd_action=$line_action              # parm lib override
fi
ech0 "2 $cmd_action"
if [ ".$command_override" != "." ]; then     # commandline override
  cmd_action=$command_override
fi
ech0 "3 $cmd_action"
echo $cmd_action $filename
$cmd_action $filename
