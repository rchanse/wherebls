#!/usr/bin/env bash

# function to copy at top and use ech0 (rather than ech1
function ech0 () {     # turn on debugging with  export ech0=ON
  if [ ".$ech0" == ".ON" ]; then
    echo $@
  fi  
}

suffix=`basename $PWD`
read -r build_dir rest < $PWD/builddir

if [ ".$suffix" != ".$build_dir" ]; then
cat <<EOF-chkbld
  A 'Mismatch has be found.  $suffix is not the same as
the first word of the first line of builddir mbr.  You should
cd to the build-lib directory and then make them match.
Please fix and reissue '. ./setvar'

EOF-chkbld
  #exit 8
  return
fi

cat << EOF-info

  The build directory for 'whereis' contains the script(s) and parm
file(s) to create a running system.  Currently it is thought to be
$HOME/$build_dir.

build-lib == $HOME/$build_dir

-------------------------
EOF-info

echo -n "Is the above correct (y/n): "
read answer rest

if [ ".$answer" == ".y" ]; then
  echo "On we go."

cat << EOF-execset
    
    You will now set the single global variable used by this
 'whereis' system ( \$rchjlp ).  It will ALSO be the directory
 for the execution library.

EOF-execset

    read -r default rest < $PWD/execdir
    echo "The current default is "$default
    echo -n "Enter the value for \$rchjlp variable(CR for default): "
    read mychoice rest

    if [ ".$mychoice" == "." ]; then        # take the default
    echo "You have chosen to take the default : "$default
    echo "FYI - this is word 1 in line 1 of "$PWD/execdir
    mychoice=$default
    fi

    # (re)set the execute dir base
    echo "$mychoice" > $PWD/execdir
#   date >> $PWD/execdir      # include timestamp in exedir

    export rchjlp=$mychoice
    echo
    echo "and now \$rchjlp is : $rchjlp"
    echo
    echo "You may run this script multiple times."
    echo "The value for \$rchjlp will be set by the last run."
    echo
    echo "By the way, 'rchjlp' is derived as the initials of "
    echo "me - Robert C. Hansen  and Jean-Luc Picard."
else 
  echo "answer ($answer) was other than 'y' "
  echo "I now quit for you to figure out why. "
  #exit 4
  return
fi
echo "That's all, folks."
